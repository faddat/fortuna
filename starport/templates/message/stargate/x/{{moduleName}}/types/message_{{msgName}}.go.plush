package types

import (
	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
)

var _ sdk.Msg = &Msg<%= title(MsgName) %>{}

func NewMsg<%= title(MsgName) %>(creator string<%= for (field) in Fields { %>, <%= field.Name %> <%= field.Datatype %><% } %>) *Msg<%= title(MsgName) %> {
  return &Msg<%= title(MsgName) %>{
		Creator: creator,<%= for (field) in Fields { %>
    <%= title(field.Name) %>: <%= field.Name %>,<% } %>
	}
}

func (msg *Msg<%= title(MsgName) %>) Route() string {
  return RouterKey
}

func (msg *Msg<%= title(MsgName) %>) Type() string {
  return "<%= title(MsgName) %>"
}

func (msg *Msg<%= title(MsgName) %>) GetSigners() []sdk.AccAddress {
  creator, err := sdk.AccAddressFromBech32(msg.Creator)
  if err != nil {
    panic(err)
  }
  return []sdk.AccAddress{creator}
}

func (msg *Msg<%= title(MsgName) %>) GetSignBytes() []byte {
  bz := ModuleCdc.MustMarshalJSON(msg)
  return sdk.MustSortJSON(bz)
}

func (msg *Msg<%= title(MsgName) %>) ValidateBasic() error {
  _, err := sdk.AccAddressFromBech32(msg.Creator)
  	if err != nil {
  		return sdkerrors.Wrapf(sdkerrors.ErrInvalidAddress, "invalid creator address (%s)", err)
  	}
  return nil
}

