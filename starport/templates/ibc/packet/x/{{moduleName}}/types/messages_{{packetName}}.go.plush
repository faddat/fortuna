package types

import (
	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
)

var _ sdk.Msg = &MsgSend<%= title(packetName) %>{}

func NewMsgSend<%= title(packetName) %>(
    sender string,
    port string,
    channelID string,
    timeoutTimestamp uint64,<%= for (field) in fields { %>
    <%= field.Name %> <%= field.Datatype %>,<% } %>
) *MsgSend<%= title(packetName) %> {
    return &MsgSend<%= title(packetName) %>{
		Sender: sender,
		Port: port,
		ChannelID: channelID,
		TimeoutTimestamp: timeoutTimestamp,<%= for (field) in fields { %>
        <%= title(field.Name) %>: <%= field.Name %>,<% } %>
	}
}

func (msg *MsgSend<%= title(packetName) %>) Route() string {
    return RouterKey
}

func (msg *MsgSend<%= title(packetName) %>) Type() string {
    return "Send<%= title(packetName) %>"
}

func (msg *MsgSend<%= title(packetName) %>) GetSigners() []sdk.AccAddress {
    sender, err := sdk.AccAddressFromBech32(msg.Sender)
    if err != nil {
        panic(err)
    }
    return []sdk.AccAddress{sender}
}

func (msg *MsgSend<%= title(packetName) %>) GetSignBytes() []byte {
    bz := ModuleCdc.MustMarshalJSON(msg)
    return sdk.MustSortJSON(bz)
}

func (msg *MsgSend<%= title(packetName) %>) ValidateBasic() error {
    _, err := sdk.AccAddressFromBech32(msg.Sender)
    if err != nil {
        return sdkerrors.Wrapf(sdkerrors.ErrInvalidAddress, "invalid sender address (%s)", err)
    }
    return nil
}
