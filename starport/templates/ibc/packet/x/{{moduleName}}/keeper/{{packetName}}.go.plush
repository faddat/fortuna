package keeper

import (
    "errors"

	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
	"<%= modulePath %>/x/<%= moduleName %>/types"
	clienttypes "github.com/cosmos/cosmos-sdk/x/ibc/core/02-client/types"
	channeltypes "github.com/cosmos/cosmos-sdk/x/ibc/core/04-channel/types"
	host "github.com/cosmos/cosmos-sdk/x/ibc/core/24-host"
)

// Transmit<%= title(packetName) %>Packet transmits the packet over IBC with the specified source port and source channel
func (k Keeper) Transmit<%= title(packetName) %>Packet(
    ctx sdk.Context,
    packetData types.<%= title(packetName) %>PacketData,
	sourcePort,
	sourceChannel string,
	timeoutHeight clienttypes.Height,
    timeoutTimestamp uint64,
) error {

    sourceChannelEnd, found := k.channelKeeper.GetChannel(ctx, sourcePort, sourceChannel)
    if !found {
        return sdkerrors.Wrapf(channeltypes.ErrChannelNotFound, "port ID (%s) channel ID (%s)", sourcePort, sourceChannel)
    }

    destinationPort := sourceChannelEnd.GetCounterparty().GetPortID()
    destinationChannel := sourceChannelEnd.GetCounterparty().GetChannelID()

    // get the next sequence
    sequence, found := k.channelKeeper.GetNextSequenceSend(ctx, sourcePort, sourceChannel)
    if !found {
        return sdkerrors.Wrapf(
            channeltypes.ErrSequenceSendNotFound,
            "source port: %s, source channel: %s", sourcePort, sourceChannel,
        )
    }

    channelCap, ok := k.scopedKeeper.GetCapability(ctx, host.ChannelCapabilityPath(sourcePort, sourceChannel))
    if !ok {
        return sdkerrors.Wrap(channeltypes.ErrChannelCapabilityNotFound, "module does not own channel capability")
    }

    packetBytes, err := packetData.GetBytes()
    if err != nil {
        return sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, "cannot marshal the packet: " + err.Error())
    }

    packet := channeltypes.NewPacket(
        packetBytes,
        sequence,
        sourcePort,
        sourceChannel,
        destinationPort,
        destinationChannel,
        timeoutHeight,
        timeoutTimestamp,
    )

    if err := k.channelKeeper.SendPacket(ctx, channelCap, packet); err != nil {
        return err
    }

    return nil
}

// OnRecv<%= title(packetName) %>Packet processes packet reception
func (k Keeper) OnRecv<%= title(packetName) %>Packet(ctx sdk.Context, packet channeltypes.Packet, data types.<%= title(packetName) %>PacketData) (packetAck types.<%= title(packetName) %>PacketAck, err error) {
	// validate packet data upon receiving
	if err := data.ValidateBasic(); err != nil {
		return packetAck, err
	}

	// TODO: packet reception logic

	return packetAck, nil
}

// OnAcknowledgement<%= title(packetName) %>Packet responds to the the success or failure of a packet
// acknowledgement written on the receiving chain.
func (k Keeper) OnAcknowledgement<%= title(packetName) %>Packet(ctx sdk.Context, packet channeltypes.Packet, data types.<%= title(packetName) %>PacketData, ack channeltypes.Acknowledgement) error {
	switch dispatchedAck := ack.Response.(type) {
	case *channeltypes.Acknowledgement_Error:

		// TODO: failed acknowledgement logic
        _ = dispatchedAck.Error

		return nil
	case *channeltypes.Acknowledgement_Result:
        // Decode the packet acknowledgment
        var packetAck types.<%= title(packetName) %>PacketAck
        err := packetAck.Unmarshal(dispatchedAck.Result)
        if err != nil {
            // The counter-party module doesn't implement the correct acknowledgment format
            return errors.New("cannot unmarshal acknowledgment")
        }

	    // TODO: successful acknowledgement logic

		return nil
	default:
    	// The counter-party module doesn't implement the correct acknowledgment format
    	return errors.New("invalid acknowledgment format")
	}
}

// OnTimeout<%= title(packetName) %>Packet responds to the case where a packet has not been transmitted because of a timeout
func (k Keeper) OnTimeout<%= title(packetName) %>Packet(ctx sdk.Context, packet channeltypes.Packet, data types.<%= title(packetName) %>PacketData) error {

    // TODO: packet timeout logic

	return nil
}