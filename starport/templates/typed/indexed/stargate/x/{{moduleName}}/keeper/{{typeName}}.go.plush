package keeper

import (
	sdk "github.com/cosmos/cosmos-sdk/types"
	"<%= ModulePath %>/x/<%= ModuleName %>/types"
	"github.com/cosmos/cosmos-sdk/store/prefix"
)

// Set<%= title(TypeName) %> set a specific <%= TypeName %> in the store from its index
func (k Keeper) Set<%= title(TypeName) %>(ctx sdk.Context, <%= TypeName %> types.<%= title(TypeName) %>) {
	store :=  prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.<%= title(TypeName) %>Key))
	b := k.cdc.MustMarshalBinaryBare(&<%= TypeName %>)
	store.Set(types.KeyPrefix(<%= TypeName %>.Index), b)
}

// Get<%= title(TypeName) %> returns a <%= TypeName %> from its index
func (k Keeper) Get<%= title(TypeName) %>(ctx sdk.Context, index string) (val types.<%= title(TypeName) %>, found bool) {
	store := prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.<%= title(TypeName) %>Key))

	b := store.Get(types.KeyPrefix(index))
    if b == nil {
        return val, false
    }

	k.cdc.MustUnmarshalBinaryBare(b, &val)
	return val, true
}

// Delete<%= title(TypeName) %> removes a <%= TypeName %> from the store
func (k Keeper) Remove<%= title(TypeName) %>(ctx sdk.Context, index string) {
	store := prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.<%= title(TypeName) %>Key))
	store.Delete(types.KeyPrefix(index))
}

// GetAll<%= title(TypeName) %> returns all <%= TypeName %>
func (k Keeper) GetAll<%= title(TypeName) %>(ctx sdk.Context) (list []types.<%= title(TypeName) %>) {
    store := prefix.NewStore(ctx.KVStore(k.storeKey), types.KeyPrefix(types.<%= title(TypeName) %>Key))
	iterator := sdk.KVStorePrefixIterator(store, []byte{})

	defer iterator.Close()

	for ; iterator.Valid(); iterator.Next() {
		var val types.<%= title(TypeName) %>
		k.cdc.MustUnmarshalBinaryBare(iterator.Value(), &val)
        list = append(list, val)
	}

    return
}
