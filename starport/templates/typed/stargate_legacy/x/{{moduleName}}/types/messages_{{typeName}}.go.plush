package types

import (
	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
)

var _ sdk.Msg = &MsgCreate<%= title(TypeName) %>{}

func NewMsgCreate<%= title(TypeName) %>(creator string<%= for (field) in Fields { %>, <%= field.Name %> <%= field.Datatype %><% } %>) *MsgCreate<%= title(TypeName) %> {
  return &MsgCreate<%= title(TypeName) %>{
		Creator: creator,<%= for (field) in Fields { %>
    <%= title(field.Name) %>: <%= field.Name %>,<% } %>
	}
}

func (msg *MsgCreate<%= title(TypeName) %>) Route() string {
  return RouterKey
}

func (msg *MsgCreate<%= title(TypeName) %>) Type() string {
  return "Create<%= title(TypeName) %>"
}

func (msg *MsgCreate<%= title(TypeName) %>) GetSigners() []sdk.AccAddress {
  creator, err := sdk.AccAddressFromBech32(msg.Creator)
  if err != nil {
    panic(err)
  }
  return []sdk.AccAddress{creator}
}

func (msg *MsgCreate<%= title(TypeName) %>) GetSignBytes() []byte {
  bz := ModuleCdc.MustMarshalJSON(msg)
  return sdk.MustSortJSON(bz)
}

func (msg *MsgCreate<%= title(TypeName) %>) ValidateBasic() error {
  _, err := sdk.AccAddressFromBech32(msg.Creator)
  	if err != nil {
  		return sdkerrors.Wrapf(sdkerrors.ErrInvalidAddress, "invalid creator address (%s)", err)
  	}
  return nil
}

var _ sdk.Msg = &MsgUpdate<%= title(TypeName) %>{}

func NewMsgUpdate<%= title(TypeName) %>(creator string, id uint64<%= for (field) in Fields { %>, <%= field.Name %> <%= field.Datatype %><% } %>) *MsgUpdate<%= title(TypeName) %> {
  return &MsgUpdate<%= title(TypeName) %>{
        Id: id,
		Creator: creator,<%= for (field) in Fields { %>
    <%= title(field.Name) %>: <%= field.Name %>,<% } %>
	}
}

func (msg *MsgUpdate<%= title(TypeName) %>) Route() string {
  return RouterKey
}

func (msg *MsgUpdate<%= title(TypeName) %>) Type() string {
  return "Update<%= title(TypeName) %>"
}

func (msg *MsgUpdate<%= title(TypeName) %>) GetSigners() []sdk.AccAddress {
  creator, err := sdk.AccAddressFromBech32(msg.Creator)
  if err != nil {
    panic(err)
  }
  return []sdk.AccAddress{creator}
}

func (msg *MsgUpdate<%= title(TypeName) %>) GetSignBytes() []byte {
  bz := ModuleCdc.MustMarshalJSON(msg)
  return sdk.MustSortJSON(bz)
}

func (msg *MsgUpdate<%= title(TypeName) %>) ValidateBasic() error {
  _, err := sdk.AccAddressFromBech32(msg.Creator)
  if err != nil {
    return sdkerrors.Wrapf(sdkerrors.ErrInvalidAddress, "invalid creator address (%s)", err)
  }
   return nil
}

var _ sdk.Msg = &MsgCreate<%= title(TypeName) %>{}

func NewMsgDelete<%= title(TypeName) %>(creator string, id uint64) *MsgDelete<%= title(TypeName) %> {
  return &MsgDelete<%= title(TypeName) %>{
        Id: id,
		Creator: creator,
	}
} 
func (msg *MsgDelete<%= title(TypeName) %>) Route() string {
  return RouterKey
}

func (msg *MsgDelete<%= title(TypeName) %>) Type() string {
  return "Delete<%= title(TypeName) %>"
}

func (msg *MsgDelete<%= title(TypeName) %>) GetSigners() []sdk.AccAddress {
  creator, err := sdk.AccAddressFromBech32(msg.Creator)
  if err != nil {
    panic(err)
  }
  return []sdk.AccAddress{creator}
}

func (msg *MsgDelete<%= title(TypeName) %>) GetSignBytes() []byte {
  bz := ModuleCdc.MustMarshalJSON(msg)
  return sdk.MustSortJSON(bz)
}

func (msg *MsgDelete<%= title(TypeName) %>) ValidateBasic() error {
  _, err := sdk.AccAddressFromBech32(msg.Creator)
  if err != nil {
    return sdkerrors.Wrapf(sdkerrors.ErrInvalidAddress, "invalid creator address (%s)", err)
  }
  return nil
}
